name: CI/CD – exdev-apply-api

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]   # cámbialo si despliegas otra rama
  workflow_dispatch: {}    # permite correrlo manualmente

permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tag
        id: meta
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "TAG=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          else
            echo "TAG=latest" >> $GITHUB_OUTPUT
          fi

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.TAG }}

      - name: Deploy over SSH
        # evita forks (no hay secrets)
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
            if [ ! -d /opt/exdev-apply-api ]; then
              mkdir -p /opt/exdev-apply-api
              cd /opt/exdev-apply-api
              git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} .
            else
              cd /opt/exdev-apply-api
              git fetch --all
              git checkout -B ${{ github.ref_name }} origin/${{ github.ref_name }}
            fi

            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

            # Define la imagen a usar según el evento:
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              export IMAGE=ghcr.io/${{ github.repository }}:pr-${{ github.event.number }}
            else
              export IMAGE=ghcr.io/${{ github.repository }}:latest
            fi

            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml up -d --remove-orphans
            docker image prune -f
            
